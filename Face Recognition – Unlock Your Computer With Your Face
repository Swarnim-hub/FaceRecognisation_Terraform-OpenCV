Face Recognition ‚Äì Unlock Your Computer With Your Face!
Step 1 - Create Training Data
import cv2
import numpy as np
# import pyfiglet module
import pyfiglet
‚Äã
# Load HAAR face classifier
face_classifier = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
‚Äã
# Load functions
def face_extractor(img):
    # Function detects faces and returns the cropped face
    # If no face detected, it returns the input image
    
    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    faces = face_classifier.detectMultiScale(gray, 1.3, 5)
    
    if faces is ():
        return None
    
    # Crop all faces found
    for (x,y,w,h) in faces:
        cropped_face = img[y:y+h, x:x+w]
‚Äã
    return cropped_face
‚Äã
# Initialize Webcam
cap = cv2.VideoCapture(1)
count = 0
‚Äã
# Collect 100 samples of your face from webcam input
while True:
‚Äã
    ret, frame = cap.read()
    if face_extractor(frame) is not None:
        count += 1
        face = cv2.resize(face_extractor(frame), (200, 200))
        face = cv2.cvtColor(face, cv2.COLOR_BGR2GRAY)
‚Äã
        # Save file in specified directory with unique name
        file_name_path = './faces/user/' + str(count) + '.jpg'
        cv2.imwrite(file_name_path, face)
‚Äã
        # Put count on images and display live count
        cv2.putText(face, str(count), (50, 50), cv2.FONT_HERSHEY_COMPLEX, 1, (0,255,0), 2)
        cv2.imshow('Face Cropper', face)
        
    else:
        print("Face not found")
        pass
‚Äã
    if cv2.waitKey(1) == 13 or count == 100: #13 is the Enter Key
        break
        
cap.release()
cv2.destroyAllWindows()      
result = pyfiglet.figlet_format("Samples Complete", font = "bulbhead" )
print(result)
‚Äã
### Step 2 - Train Model
cap.release()
import cv2
import numpy as np
from os import listdir
from os.path import isfile, join
‚Äã
# Get the training data we previously made
data_path = './faces/user/'
onlyfiles = [f for f in listdir(data_path) if isfile(join(data_path, f))]
‚Äã
# Create arrays for training data and labels
Training_Data, Labels = [], []
‚Äã
# Open training images in our datapath
# Create a numpy array for training data
for i, files in enumerate(onlyfiles):
    image_path = data_path + onlyfiles[i]
    images = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    Training_Data.append(np.asarray(images, dtype=np.uint8))
    Labels.append(i)
‚Äã
# Create a numpy array for both training data and labels
Labels = np.asarray(Labels, dtype=np.int32)
‚Äã
# Initialize facial recognizer
# model = cv2.face.createLBPHFaceRecognizer()
# NOTE: For OpenCV 3.0 use cv2.face.createLBPHFaceRecognizer()
# pip install opencv-contrib-python
# model = cv2.createLBPHFaceRecognizer()
‚Äã
vimal_model  = cv2.face_LBPHFaceRecognizer.create()
# Let's train our model 
vimal_model.train(np.asarray(Training_Data), np.asarray(Labels))
result = pyfiglet.figlet_format("Model trained sucessefully", font = "bulbhead" )
print(result)
‚Äã
Step 3 - Run Our Facial Recognition
import cv2
import numpy as np
import os
import time
‚Äã
‚Äã
face_classifier = cv2.CascadeClassifier('haarcascade_frontalface_default.xml')
‚Äã
def face_detector(img, size=0.5):
    
    # Convert image to grayscale
    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
    faces = face_classifier.detectMultiScale(gray, 1.3, 5)
    if faces is ():
        return img, []
    
    
    for (x,y,w,h) in faces:
        cv2.rectangle(img,(x,y),(x+w,y+h),(0,255,255),2)
        roi = img[y:y+h, x:x+w]
        roi = cv2.resize(roi, (200, 200))
    return img, roi
‚Äã
‚Äã
# Open Webcam
cap = cv2.VideoCapture(1)
‚Äã
while True:
‚Äã
    ret, frame = cap.read()
    
    image, face = face_detector(frame)
    
    try:
        face = cv2.cvtColor(face, cv2.COLOR_BGR2GRAY)
‚Äã
        # Pass face to prediction model
        # "results" comprises of a tuple containing the label and the confidence value
        results = vimal_model.predict(face)
        # harry_model.predict(face)
        
        if results[1] <500:
            confidence = int( 100 * (1 - (results[1])/400) )
            display_string = str(confidence) + '% Confident it is Swarnim'
            cv2.putText(image, display_string, (100, 120), cv2.FONT_HERSHEY_COMPLEX, 1, (255,120,150), 2)
       
            if confidence > 80:
                try:
                
                    cv2.putText(image, "Hey Swarnim", (255, 450), cv2.FONT_HERSHEY_COMPLEX, 1, (0,100,0), 2)
                    cv2.imshow('Face Recognition', image )
                    cv2.putText(image, "Hey Swarnim", (250, 450), cv2.FONT_HERSHEY_COMPLEX, 1, (0,255,0), 2)
                    cv2.imshow('Face Recognition', image )            
                    mail()
                    msg()
                    terraform()
                    break
                except:
                    print("Error")
            else:
                print("No Face Found")
                
    except:
        cv2.putText(image, "No Face Found", (220, 120) , cv2.FONT_HERSHEY_COMPLEX, 1, (0,0,255), 2)
        cv2.putText(image, "looking for face", (250, 450), cv2.FONT_HERSHEY_COMPLEX, 1, (0,0,255), 2)
        cv2.imshow('Face Recognition', image )
        pass
        
    if cv2.waitKey(1) == 13: #13 is the Enter Key
        break
        
cap.release()
cv2.destroyAllWindows()
def mail():
    import smtplib
    s = smtplib.SMTP('smtp.gmail.com', 587)
    s.starttls()
    s.login("fake57554@gmail.com", "123456789@Fake")
    message = "Hello!! You are catched in camera!!!"
    s.sendmail("swarnim1345@gmail.com", "swarnim1245@gmail.com", message)
    s.quit()
    result = pyfiglet.figlet_format("Mail sent successfully", font = "bulbhead" )
    print(result)
def msg():
    import pywhatkit
    pywhatkit.sendwhatmsg_instantly("+918445539400", "Helloo!!, This is from Model msg successfully created...üòç")
    result = pyfiglet.figlet_format("Whatsapp msg sent", font = "bulbhead" )
    print(result)
    
def terraform():
    import os
    os.system("terraform init") #downloading the plugins
    os.system("terraform apply --auto-approve")
    result = pyfiglet.figlet_format("Instance launch successfully", font = "bulbhead" )
    print(result)
       
